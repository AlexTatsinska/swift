
import exception.*;
import gamer.*;
import java.awt.BorderLayout;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import mysql.gamer.*;
import java.sql.*;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author AlexT
 */
public class NoteTrackerTool extends javax.swing.JFrame {

    /**
     * Creates new form PokerTool
     */
    public NoteTrackerTool() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchGamerName = new javax.swing.JTextField();
        searchGamerButton = new javax.swing.JButton();
        addGamerName = new javax.swing.JTextField();
        addGamerButton = new javax.swing.JButton();
        gamerNote = new java.awt.TextArea();
        addNoteButton = new javax.swing.JButton();
        addNewGamerNote = new javax.swing.JLabel();
        searchPictureButton = new javax.swing.JButton();
        picturePath = new javax.swing.JTextField();
        addPictureButton = new javax.swing.JButton();
        pictureShow1 = new javax.swing.JLabel();
        pictureShow2 = new javax.swing.JLabel();
        pictureShow3 = new javax.swing.JLabel();
        pictureShow5 = new javax.swing.JLabel();
        pictureShow6 = new javax.swing.JLabel();
        pictureShow7 = new javax.swing.JLabel();
        pictureShow4 = new javax.swing.JLabel();
        pictureShow8 = new javax.swing.JLabel();
        pictureShow9 = new javax.swing.JLabel();
        pictureShow10 = new javax.swing.JLabel();
        pictureShow11 = new javax.swing.JLabel();
        pictureShow12 = new javax.swing.JLabel();
        lastOpenGamers = new javax.swing.JComboBox<>();
        loadGamerButton = new javax.swing.JButton();
        deleteHystoryButton = new javax.swing.JButton();
        loadAllGamers = new javax.swing.JComboBox<>();
        loadAllGamersButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Note Tracker version 1.6");
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        searchGamerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchGamerNameKeyPressed(evt);
            }
        });

        searchGamerButton.setText("Search gamer");
        searchGamerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchGamerButtonActionPerformed(evt);
            }
        });

        addGamerButton.setText("Add new gamer");
        addGamerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGamerButtonActionPerformed(evt);
            }
        });

        addNoteButton.setText("Add note");
        addNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoteButtonActionPerformed(evt);
            }
        });

        addNewGamerNote.setFont(new java.awt.Font("Book Antiqua", 1, 24)); // NOI18N
        addNewGamerNote.setForeground(new java.awt.Color(0, 0, 153));

        searchPictureButton.setText("Search picture");
        searchPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPictureButtonActionPerformed(evt);
            }
        });

        picturePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picturePathActionPerformed(evt);
            }
        });

        addPictureButton.setText("Add picture");
        addPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPictureButtonActionPerformed(evt);
            }
        });

        loadGamerButton.setText("Load gamer");
        loadGamerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGamerButtonActionPerformed(evt);
            }
        });

        deleteHystoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/deleteHystory.png"))); // NOI18N
        deleteHystoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHystoryButtonActionPerformed(evt);
            }
        });

        loadAllGamersButton.setText("Load gamer");
        loadAllGamersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAllGamersButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchGamerName, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchGamerButton)
                                .addGap(27, 27, 27)
                                .addComponent(lastOpenGamers, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loadGamerButton)
                                .addGap(34, 34, 34)
                                .addComponent(loadAllGamers, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loadAllGamersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 28, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addNewGamerNote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(66, 66, 66)))
                        .addComponent(addGamerName, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addGamerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pictureShow9)
                                .addGap(18, 18, 18)
                                .addComponent(pictureShow10)
                                .addGap(18, 18, 18)
                                .addComponent(pictureShow11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pictureShow12))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(pictureShow1)
                                        .addGap(17, 17, 17)
                                        .addComponent(pictureShow2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(pictureShow5)
                                        .addGap(18, 18, 18)
                                        .addComponent(pictureShow6)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(pictureShow3)
                                        .addGap(14, 14, 14)
                                        .addComponent(pictureShow4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(pictureShow7)
                                        .addGap(18, 18, 18)
                                        .addComponent(pictureShow8))))
                            .addComponent(gamerNote, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addNoteButton)
                                .addGap(18, 18, 18)
                                .addComponent(picturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchPictureButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addPictureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteHystoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchGamerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchGamerButton)
                    .addComponent(addGamerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addGamerButton)
                    .addComponent(lastOpenGamers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadGamerButton)
                    .addComponent(loadAllGamers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadAllGamersButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addNewGamerNote, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 173, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pictureShow1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pictureShow2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pictureShow3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pictureShow4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pictureShow5)
                    .addComponent(pictureShow6)
                    .addComponent(pictureShow7)
                    .addComponent(pictureShow8))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pictureShow9)
                    .addComponent(pictureShow10)
                    .addComponent(pictureShow11)
                    .addComponent(pictureShow12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gamerNote, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNoteButton)
                    .addComponent(picturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchPictureButton)
                    .addComponent(addPictureButton)
                    .addComponent(deleteHystoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void searchGamerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchGamerButtonActionPerformed
        // TODO add your handling code here:
        
        String gamerName = searchGamerName.getText();
        String dbmsConnString = "jdbc:mysql://localhost:3306/note_tracker_database";
        String userName = "root";
        String password = "SwiftTraining1";
        Gamer gamer = null;
        List<Image> pictures = null;
        gamerNote.setText("");
        pictureShow1.setIcon(null);
        pictureShow2.setIcon(null);
        pictureShow3.setIcon(null);
        pictureShow4.setIcon(null);
        pictureShow5.setIcon(null);
        pictureShow6.setIcon(null);
        pictureShow7.setIcon(null);
        pictureShow8.setIcon(null);
        pictureShow9.setIcon(null);
        pictureShow10.setIcon(null);
        pictureShow11.setIcon(null);
        pictureShow12.setIcon(null);
        lastOpenGamers.removeAllItems();
        loadAllGamers.removeAllItems();
        MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
        try {
            for (Gamer openedGamers : mySqlGamer.loadAllGamers()) {
                loadAllGamers.addItem(openedGamers.getGamerName());
            }
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (searchGamerName.getText() != null || !searchGamerName.getText().equals("") || lastOpenGamers.getToolTipText() != null) {
            lastOpenGamers.removeAllItems();

            try {
                for (Gamer openedGamers : mySqlGamer.getAllGamers()) {
                    lastOpenGamers.addItem(openedGamers.getGamerName());
                    //JComboBox test = new JComboBox();
                    //test.addItem(new ComboItem(0, "orange"));
                }
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                gamer = mySqlGamer.getGamer(gamerName);
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (gamer != null) {
                ImageIcon icon1 = null;
                ImageIcon icon2 = null;
                ImageIcon icon3 = null;
                ImageIcon icon4 = null;
                ImageIcon icon5 = null;
                ImageIcon icon6 = null;
                ImageIcon icon7 = null;
                ImageIcon icon8 = null;
                ImageIcon icon9 = null;
                ImageIcon icon10 = null;
                ImageIcon icon11 = null;
                ImageIcon icon12 = null;

                try {
                    mySqlGamer.insertLastSearchedGamer(gamer.getGamerId());
                } catch (DALException ex) {
                    Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
                }
                MySqlPicture mySqlPicture = new MySqlPicture(dbmsConnString, userName, password);

                try {
                    pictures = mySqlPicture.getPictures(gamer.getGamerId());
                } catch (DALException ex) {
                    Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
                }
                int counter = 1;
                for (Image image : pictures) {

                    // JLabel lPhoto = new JLabel();
                    // lPhoto.setIcon(icon);
                    switch (counter) {
                        case 1:
                            icon1 = new ImageIcon(image);
                            pictureShow1.setIcon(icon1);
                            break;
                        case 2:
                            icon2 = new ImageIcon(image);
                            pictureShow2.setIcon(icon2);
                            break;
                        case 3:
                            icon3 = new ImageIcon(image);
                            pictureShow3.setIcon(icon3);
                            break;
                        case 4:
                            icon4 = new ImageIcon(image);
                            pictureShow4.setIcon(icon4);
                            break;
                        case 5:
                            icon5 = new ImageIcon(image);
                            pictureShow5.setIcon(icon5);
                            break;
                        case 6:
                            icon6 = new ImageIcon(image);
                            pictureShow6.setIcon(icon6);
                            break;
                        case 7:
                            icon7 = new ImageIcon(image);
                            pictureShow7.setIcon(icon7);
                            break;
                        case 8:
                            icon8 = new ImageIcon(image);
                            pictureShow8.setIcon(icon8);
                            break;
                        case 9:
                            icon9 = new ImageIcon(image);
                            pictureShow9.setIcon(icon9);
                            break;
                        case 10:
                            icon10 = new ImageIcon(image);
                            pictureShow10.setIcon(icon10);
                            break;
                        case 11:
                            icon11 = new ImageIcon(image);
                            pictureShow11.setIcon(icon11);
                            break;
                        case 12:
                            icon12 = new ImageIcon(image);
                            pictureShow12.setIcon(icon12);
                            break;
                    }
                    counter++;
                }

                // add(lPhoto);
                try {
                    gamer.setGamerNote(mySqlGamer.getNotes(gamer.getGamerId()));
                } catch (DALException ex) {
                    Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
                }

                gamerNote.setText(gamer.getGamerNote());
                addNewGamerNote.setText(gamerName);
                searchGamerName.setText("");

            } else {
                gamerNote.setText("");
                pictureShow1.setIcon(null);
                pictureShow2.setIcon(null);
                pictureShow3.setIcon(null);
                pictureShow4.setIcon(null);
                pictureShow5.setIcon(null);
                pictureShow6.setIcon(null);
                pictureShow7.setIcon(null);
                pictureShow8.setIcon(null);
                pictureShow9.setIcon(null);
                pictureShow10.setIcon(null);
                pictureShow11.setIcon(null);
                pictureShow12.setIcon(null);
                addNewGamerNote.setText(gamerName + " not exist! Please try again with correct data!");
                searchGamerName.setText("");
            }
        }
    }//GEN-LAST:event_searchGamerButtonActionPerformed
    Gamer gamer = null;
    private void addNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoteButtonActionPerformed
        // TODO add your handling code here:
        String note = gamerNote.getText();

        int gamerId;
        String dbmsConnString = "jdbc:mysql://localhost:3306/note_tracker_database";
        String userName = "root";
        String password = "SwiftTraining1";
        String gamerName = addNewGamerNote.getText();
        MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
        try {
            gamer = mySqlGamer.getGamer(gamerName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        gamerId = gamer.getGamerId();
        try {
            mySqlGamer.insertNewNote(gamerId, note);
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addNoteButtonActionPerformed

    private void addGamerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGamerButtonActionPerformed
        // TODO add your handling code here:
        if (addGamerName.getText() != null || !addGamerName.getText().equals("")) {
            String gamerName = addGamerName.getText();
            String dbmsConnString = "jdbc:mysql://localhost:3306/note_tracker_database";
            String userName = "root";
            String password = "SwiftTraining1";

            MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
            try {
                mySqlGamer.insertNewGamer(gamerName);
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }
            String text = gamerName + " is added!";
            //addNewGamerNote.setText(text);
            addGamerName.setText("");
            loadAllGamers.removeAllItems();
            try {
                for (Gamer openedGamers : mySqlGamer.loadAllGamers()) {
                    loadAllGamers.addItem(openedGamers.getGamerName());
                }
            } catch (DALException | SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }
            gamerNote.setText("");
            pictureShow1.setIcon(null);
            pictureShow2.setIcon(null);
            pictureShow3.setIcon(null);
            pictureShow4.setIcon(null);
            pictureShow5.setIcon(null);
            pictureShow6.setIcon(null);
            pictureShow7.setIcon(null);
            pictureShow8.setIcon(null);
            pictureShow9.setIcon(null);
            pictureShow10.setIcon(null);
            pictureShow11.setIcon(null);
            pictureShow12.setIcon(null);

            try {
                for (Gamer openedGamers : mySqlGamer.getAllGamers()) {
                    lastOpenGamers.addItem(openedGamers.getGamerName());
                    //JComboBox test = new JComboBox();
                    //test.addItem(new ComboItem(0, "orange"));
                }
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                gamer = mySqlGamer.getGamer(gamerName);
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (gamer != null) {

                try {
                    mySqlGamer.insertLastSearchedGamer(gamer.getGamerId());
                } catch (DALException ex) {
                    Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
                }
                MySqlPicture mySqlPicture = new MySqlPicture(dbmsConnString, userName, password);

                gamerNote.setText(gamer.getGamerNote());
                addNewGamerNote.setText(gamerName);

            }

        }
    }//GEN-LAST:event_addGamerButtonActionPerformed
    String fileName = null;
    private void searchPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPictureButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File f = fileChooser.getSelectedFile();
        fileName = f.getAbsolutePath();
        picturePath.setText(fileName);

    }//GEN-LAST:event_searchPictureButtonActionPerformed

    private void picturePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picturePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_picturePathActionPerformed

    private void addPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPictureButtonActionPerformed
        // TODO add your handling code here:
        String dbmsConnString = "jdbc:mysql://localhost:3306/note_tracker_database";
        String userName = "root";
        String password = "SwiftTraining1";
        fileName = picturePath.getText();
        String gamerName = addNewGamerNote.getText();
        int gamerId;
        MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
        try {
            gamer = mySqlGamer.getGamer(gamerName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        gamerId = gamer.getGamerId();
        MySqlPicture mySqlPicture = new MySqlPicture(dbmsConnString, userName, password);
        try {
            mySqlPicture.insertNewPicture(gamerId, fileName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        picturePath.setText("");
        List<Image> pictures = null;
        ImageIcon icon1 = null;
        ImageIcon icon2 = null;
        ImageIcon icon3 = null;
        ImageIcon icon4 = null;
        ImageIcon icon5 = null;
        ImageIcon icon6 = null;
        ImageIcon icon7 = null;
        ImageIcon icon8 = null;
        ImageIcon icon9 = null;
        ImageIcon icon10 = null;
        ImageIcon icon11 = null;
        ImageIcon icon12 = null;

        try {
            pictures = mySqlPicture.getPictures(gamer.getGamerId());
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        int counter = 1;
        for (Image image : pictures) {

            // JLabel lPhoto = new JLabel();
            // lPhoto.setIcon(icon);
            switch (counter) {
                case 1:
                    icon1 = new ImageIcon(image);
                    pictureShow1.setIcon(icon1);
                    break;
                case 2:
                    icon2 = new ImageIcon(image);
                    pictureShow2.setIcon(icon2);
                    break;
                case 3:
                    icon3 = new ImageIcon(image);
                    pictureShow3.setIcon(icon3);
                    break;
                case 4:
                    icon4 = new ImageIcon(image);
                    pictureShow4.setIcon(icon4);
                    break;
                case 5:
                    icon5 = new ImageIcon(image);
                    pictureShow5.setIcon(icon5);
                    break;
                case 6:
                    icon6 = new ImageIcon(image);
                    pictureShow6.setIcon(icon6);
                    break;
                case 7:
                    icon7 = new ImageIcon(image);
                    pictureShow7.setIcon(icon7);
                    break;
                case 8:
                    icon8 = new ImageIcon(image);
                    pictureShow8.setIcon(icon8);
                    break;
                case 9:
                    icon9 = new ImageIcon(image);
                    pictureShow9.setIcon(icon9);
                    break;
                case 10:
                    icon10 = new ImageIcon(image);
                    pictureShow10.setIcon(icon10);
                    break;
                case 11:
                    icon11 = new ImageIcon(image);
                    pictureShow11.setIcon(icon11);
                    break;
                case 12:
                    icon12 = new ImageIcon(image);
                    pictureShow12.setIcon(icon12);
                    break;
            }
            counter++;
        }


    }//GEN-LAST:event_addPictureButtonActionPerformed

    private void loadGamerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGamerButtonActionPerformed
        // TODO add your handling code here:

        String gamerName = lastOpenGamers.getSelectedItem().toString();
        String dbmsConnString = "jdbc:mysql://localhost:3306/note_tracker_database";
        String userName = "root";
        String password = "SwiftTraining1";
        Gamer gamer = null;
        gamerNote.setText("");
        pictureShow1.setIcon(null);
        pictureShow2.setIcon(null);
        pictureShow3.setIcon(null);
        pictureShow4.setIcon(null);
        pictureShow5.setIcon(null);
        pictureShow6.setIcon(null);
        pictureShow7.setIcon(null);
        pictureShow8.setIcon(null);
        pictureShow9.setIcon(null);
        pictureShow10.setIcon(null);
        pictureShow11.setIcon(null);
        pictureShow12.setIcon(null);
        List<Image> pictures = null;
        lastOpenGamers.removeAllItems();
        loadAllGamers.removeAllItems();
        MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
        try {
            for (Gamer openedGamers : mySqlGamer.getAllGamers()) {
                lastOpenGamers.addItem(openedGamers.getGamerName());
            }
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            for (Gamer openedGamers : mySqlGamer.loadAllGamers()) {
                loadAllGamers.addItem(openedGamers.getGamerName());
            }
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            gamer = mySqlGamer.getGamer(gamerName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (gamer != null) {
            ImageIcon icon1 = null;
            ImageIcon icon2 = null;
            ImageIcon icon3 = null;
            ImageIcon icon4 = null;
            ImageIcon icon5 = null;
            ImageIcon icon6 = null;
            ImageIcon icon7 = null;
            ImageIcon icon8 = null;
            ImageIcon icon9 = null;
            ImageIcon icon10 = null;
            ImageIcon icon11 = null;
            ImageIcon icon12 = null;

            try {
                mySqlGamer.insertLastSearchedGamer(gamer.getGamerId());
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }
            MySqlPicture mySqlPicture = new MySqlPicture(dbmsConnString, userName, password);

            try {
                pictures = mySqlPicture.getPictures(gamer.getGamerId());
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }
            int counter = 1;
            for (Image image : pictures) {

                // JLabel lPhoto = new JLabel();
                // lPhoto.setIcon(icon);
                switch (counter) {
                    case 1:
                        icon1 = new ImageIcon(image);
                        pictureShow1.setIcon(icon1);
                        break;
                    case 2:
                        icon2 = new ImageIcon(image);
                        pictureShow2.setIcon(icon2);
                        break;
                    case 3:
                        icon3 = new ImageIcon(image);
                        pictureShow3.setIcon(icon3);
                        break;
                    case 4:
                        icon4 = new ImageIcon(image);
                        pictureShow4.setIcon(icon4);
                        break;
                    case 5:
                        icon5 = new ImageIcon(image);
                        pictureShow5.setIcon(icon5);
                        break;
                    case 6:
                        icon6 = new ImageIcon(image);
                        pictureShow6.setIcon(icon6);
                        break;
                    case 7:
                        icon7 = new ImageIcon(image);
                        pictureShow7.setIcon(icon7);
                        break;
                    case 8:
                        icon8 = new ImageIcon(image);
                        pictureShow8.setIcon(icon8);
                        break;
                    case 9:
                        icon9 = new ImageIcon(image);
                        pictureShow9.setIcon(icon9);
                        break;
                    case 10:
                        icon10 = new ImageIcon(image);
                        pictureShow10.setIcon(icon10);
                        break;
                    case 11:
                        icon11 = new ImageIcon(image);
                        pictureShow11.setIcon(icon11);
                        break;
                    case 12:
                        icon12 = new ImageIcon(image);
                        pictureShow12.setIcon(icon12);
                        break;
                }
                counter++;
            }

            // add(lPhoto);
            try {
                gamer.setGamerNote(mySqlGamer.getNotes(gamer.getGamerId()));
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }

            gamerNote.setText(gamer.getGamerNote());
            addNewGamerNote.setText(gamerName);
        }
    }//GEN-LAST:event_loadGamerButtonActionPerformed

    private void deleteHystoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHystoryButtonActionPerformed
        // TODO add your handling code here:
        String dbmsConnString = "jdbc:mysql://localhost:3306/note_tracker_database";
        String userName = "root";
        String password = "SwiftTraining1";
        MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
        try {
            mySqlGamer.deleteAllGamers();
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        lastOpenGamers.removeAllItems();
    }//GEN-LAST:event_deleteHystoryButtonActionPerformed

    private void loadAllGamersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAllGamersButtonActionPerformed
        // TODO add your handling code here:
        String gamerName = loadAllGamers.getSelectedItem().toString();
        String dbmsConnString = "jdbc:mysql://localhost:3306/note_tracker_database";
        String userName = "root";
        String password = "SwiftTraining1";
        Gamer gamer = null;
        gamerNote.setText("");
        pictureShow1.setIcon(null);
        pictureShow2.setIcon(null);
        pictureShow3.setIcon(null);
        pictureShow4.setIcon(null);
        pictureShow5.setIcon(null);
        pictureShow6.setIcon(null);
        pictureShow7.setIcon(null);
        pictureShow8.setIcon(null);
        pictureShow9.setIcon(null);
        pictureShow10.setIcon(null);
        pictureShow11.setIcon(null);
        pictureShow12.setIcon(null);
        List<Image> pictures = null;
        lastOpenGamers.removeAllItems();
        loadAllGamers.removeAllItems();
        MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
        try {
            for (Gamer openedGamers : mySqlGamer.getAllGamers()) {
                lastOpenGamers.addItem(openedGamers.getGamerName());
            }
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            for (Gamer openedGamers : mySqlGamer.loadAllGamers()) {
                loadAllGamers.addItem(openedGamers.getGamerName());
            }
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            gamer = mySqlGamer.getGamer(gamerName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (gamer != null) {
            ImageIcon icon1 = null;
            ImageIcon icon2 = null;
            ImageIcon icon3 = null;
            ImageIcon icon4 = null;
            ImageIcon icon5 = null;
            ImageIcon icon6 = null;
            ImageIcon icon7 = null;
            ImageIcon icon8 = null;
            ImageIcon icon9 = null;
            ImageIcon icon10 = null;
            ImageIcon icon11 = null;
            ImageIcon icon12 = null;

            try {
                mySqlGamer.insertLastSearchedGamer(gamer.getGamerId());
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }
            MySqlPicture mySqlPicture = new MySqlPicture(dbmsConnString, userName, password);

            try {
                pictures = mySqlPicture.getPictures(gamer.getGamerId());
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }
            int counter = 1;
            for (Image image : pictures) {

                // JLabel lPhoto = new JLabel();
                // lPhoto.setIcon(icon);
                switch (counter) {
                    case 1:
                        icon1 = new ImageIcon(image);
                        pictureShow1.setIcon(icon1);
                        break;
                    case 2:
                        icon2 = new ImageIcon(image);
                        pictureShow2.setIcon(icon2);
                        break;
                    case 3:
                        icon3 = new ImageIcon(image);
                        pictureShow3.setIcon(icon3);
                        break;
                    case 4:
                        icon4 = new ImageIcon(image);
                        pictureShow4.setIcon(icon4);
                        break;
                    case 5:
                        icon5 = new ImageIcon(image);
                        pictureShow5.setIcon(icon5);
                        break;
                    case 6:
                        icon6 = new ImageIcon(image);
                        pictureShow6.setIcon(icon6);
                        break;
                    case 7:
                        icon7 = new ImageIcon(image);
                        pictureShow7.setIcon(icon7);
                        break;
                    case 8:
                        icon8 = new ImageIcon(image);
                        pictureShow8.setIcon(icon8);
                        break;
                    case 9:
                        icon9 = new ImageIcon(image);
                        pictureShow9.setIcon(icon9);
                        break;
                    case 10:
                        icon10 = new ImageIcon(image);
                        pictureShow10.setIcon(icon10);
                        break;
                    case 11:
                        icon11 = new ImageIcon(image);
                        pictureShow11.setIcon(icon11);
                        break;
                    case 12:
                        icon12 = new ImageIcon(image);
                        pictureShow12.setIcon(icon12);
                        break;
                }
                counter++;
            }

            // add(lPhoto);
            try {
                gamer.setGamerNote(mySqlGamer.getNotes(gamer.getGamerId()));
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }

            gamerNote.setText(gamer.getGamerNote());
            addNewGamerNote.setText(gamerName);
            
        }
    }//GEN-LAST:event_loadAllGamersButtonActionPerformed

    private void searchGamerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchGamerNameKeyPressed
        // TODO add your handling code here:
        String gamerName = searchGamerName.getText();
        
    }//GEN-LAST:event_searchGamerNameKeyPressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        String dbmsConnString = "jdbc:mysql://localhost:3306/note_tracker_database";
        String userName = "root";
        String password = "SwiftTraining1";
        Gamer gamer = null;
        MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
        try {
            for (Gamer openedGamers : mySqlGamer.loadAllGamers()) {
                loadAllGamers.addItem(openedGamers.getGamerName());
            }
        } catch (DALException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
        }
            try {
                for (Gamer openedGamers : mySqlGamer.getAllGamers()) {
                    lastOpenGamers.addItem(openedGamers.getGamerName());
                    //JComboBox test = new JComboBox();
                    //test.addItem(new ComboItem(0, "orange"));
                }
            } catch (DALException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTrackerTool.class.getName()).log(Level.SEVERE, null, ex);
            }

    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoteTrackerTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoteTrackerTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoteTrackerTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoteTrackerTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NoteTrackerTool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGamerButton;
    private javax.swing.JTextField addGamerName;
    private javax.swing.JLabel addNewGamerNote;
    private javax.swing.JButton addNoteButton;
    private javax.swing.JButton addPictureButton;
    private javax.swing.JButton deleteHystoryButton;
    private java.awt.TextArea gamerNote;
    private javax.swing.JComboBox<String> lastOpenGamers;
    private javax.swing.JComboBox<String> loadAllGamers;
    private javax.swing.JButton loadAllGamersButton;
    private javax.swing.JButton loadGamerButton;
    private javax.swing.JTextField picturePath;
    private javax.swing.JLabel pictureShow1;
    private javax.swing.JLabel pictureShow10;
    private javax.swing.JLabel pictureShow11;
    private javax.swing.JLabel pictureShow12;
    private javax.swing.JLabel pictureShow2;
    private javax.swing.JLabel pictureShow3;
    private javax.swing.JLabel pictureShow4;
    private javax.swing.JLabel pictureShow5;
    private javax.swing.JLabel pictureShow6;
    private javax.swing.JLabel pictureShow7;
    private javax.swing.JLabel pictureShow8;
    private javax.swing.JLabel pictureShow9;
    private javax.swing.JButton searchGamerButton;
    private javax.swing.JTextField searchGamerName;
    private javax.swing.JButton searchPictureButton;
    // End of variables declaration//GEN-END:variables

}
