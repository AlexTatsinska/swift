/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import exception.DALException;
import gamer.*;
import java.awt.PopupMenu;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import mysql.gamer.*;

/**
 *
 * @author AlexT
 */
public class NoteTracker extends javax.swing.JFrame {

    /**
     * Creates new form NoteTracker
     */
    public NoteTracker() {
        initComponents();
        jLabelResult.setVisible(false);
        jLabelCreateGamerResult.setVisible(false);
        jComboBoxLeaks.setVisible(false);
        jButtonAddGamerLeak.setVisible(false);
        jLabelResultLeakAdd.setVisible(false);
        picturePath.setVisible(false);
        jButtonAddPicture.setVisible(false);
        gamerForm1.setVisible(false);
        gamerForm2.setVisible(false);
        gamerForm3.setVisible(false);
        gamerForm4.setVisible(false);
        gamerForm5.setVisible(false);
        gamerForm6.setVisible(false);
        gamerForm7.setVisible(false);
        gamerForm8.setVisible(false);
        gamerForm9.setVisible(false);
        gamerForm10.setVisible(false);
        gamerForm11.setVisible(false);
        gamerForm12.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneNoteTrackerLeaks = new javax.swing.JTabbedPane();
        jScrollPaneGamers = new javax.swing.JScrollPane();
        jScrollPanelGamers = new javax.swing.JPanel();
        jTextFieldSearchGamer = new javax.swing.JTextField();
        jButtonSearchGamer = new javax.swing.JButton();
        gamerForm1 = new GamerForm();
        gamerForm2 = new GamerForm();
        gamerForm3 = new GamerForm();
        gamerForm4 = new GamerForm();
        gamerForm5 = new GamerForm();
        gamerForm6 = new GamerForm();
        gamerForm7 = new GamerForm();
        gamerForm8 = new GamerForm();
        gamerForm9 = new GamerForm();
        gamerForm10 = new GamerForm();
        gamerForm11 = new GamerForm();
        gamerForm12 = new GamerForm();
        jScrollPaneLeaks = new javax.swing.JScrollPane();
        jScrollPaneCreateLeaks = new javax.swing.JScrollPane();
        jPanelCreateLeaks = new javax.swing.JPanel();
        jTextFieldLeakName = new javax.swing.JTextField();
        jLabelLeakName = new javax.swing.JLabel();
        jButtonCreateLeak = new javax.swing.JButton();
        jLabelResult = new javax.swing.JLabel();
        jScrollPaneCreateGamer = new javax.swing.JScrollPane();
        jPanelCreateGamer = new javax.swing.JPanel();
        jTextFieldSearchedGanerName = new javax.swing.JTextField();
        jButtonSearchGamerCreate = new javax.swing.JButton();
        jTextFieldNewGamerName = new javax.swing.JTextField();
        jButtonAddGamer = new javax.swing.JButton();
        jLabelCreateGamerResult = new javax.swing.JLabel();
        jComboBoxLeaks = new javax.swing.JComboBox<>();
        jButtonAddGamerLeak = new javax.swing.JButton();
        jLabelResultLeakAdd = new javax.swing.JLabel();
        picturePath = new javax.swing.JTextField();
        jButtonAddPicture = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NoteTracker v2.0");
        setSize(new java.awt.Dimension(788, 522));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                Gamer1(evt);
            }
        });

        jTextFieldSearchGamer.setToolTipText("Insert searched gamer's name");
        jTextFieldSearchGamer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchGamerActionPerformed(evt);
            }
        });

        jButtonSearchGamer.setText("Search gamer");
        jButtonSearchGamer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchGamerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jScrollPanelGamersLayout = new javax.swing.GroupLayout(jScrollPanelGamers);
        jScrollPanelGamers.setLayout(jScrollPanelGamersLayout);
        jScrollPanelGamersLayout.setHorizontalGroup(
            jScrollPanelGamersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jScrollPanelGamersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jScrollPanelGamersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jScrollPanelGamersLayout.createSequentialGroup()
                        .addComponent(jTextFieldSearchGamer, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSearchGamer))
                    .addGroup(jScrollPanelGamersLayout.createSequentialGroup()
                        .addComponent(gamerForm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jScrollPanelGamersLayout.createSequentialGroup()
                        .addComponent(gamerForm5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jScrollPanelGamersLayout.createSequentialGroup()
                        .addComponent(gamerForm9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamerForm12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jScrollPanelGamersLayout.setVerticalGroup(
            jScrollPanelGamersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jScrollPanelGamersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jScrollPanelGamersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gamerForm3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jScrollPanelGamersLayout.createSequentialGroup()
                        .addGroup(jScrollPanelGamersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldSearchGamer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSearchGamer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jScrollPanelGamersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(gamerForm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gamerForm2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(gamerForm4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jScrollPanelGamersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gamerForm5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gamerForm6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gamerForm7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gamerForm8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jScrollPanelGamersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gamerForm9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gamerForm10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gamerForm11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gamerForm12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        jScrollPaneGamers.setViewportView(jScrollPanelGamers);

        jTabbedPaneNoteTrackerLeaks.addTab("Gamers", jScrollPaneGamers);

        jLabelLeakName.setText("Leak name");

        jButtonCreateLeak.setText("Create leak");
        jButtonCreateLeak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateLeakActionPerformed(evt);
            }
        });

        jLabelResult.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabelResult.setForeground(new java.awt.Color(0, 0, 255));
        jLabelResult.setText("Result");

        javax.swing.GroupLayout jPanelCreateLeaksLayout = new javax.swing.GroupLayout(jPanelCreateLeaks);
        jPanelCreateLeaks.setLayout(jPanelCreateLeaksLayout);
        jPanelCreateLeaksLayout.setHorizontalGroup(
            jPanelCreateLeaksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCreateLeaksLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanelCreateLeaksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelCreateLeaksLayout.createSequentialGroup()
                        .addComponent(jLabelLeakName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldLeakName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCreateLeak, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(941, Short.MAX_VALUE))
        );
        jPanelCreateLeaksLayout.setVerticalGroup(
            jPanelCreateLeaksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCreateLeaksLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelCreateLeaksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldLeakName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelLeakName)
                    .addComponent(jButtonCreateLeak))
                .addGap(42, 42, 42)
                .addComponent(jLabelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(768, Short.MAX_VALUE))
        );

        jScrollPaneCreateLeaks.setViewportView(jPanelCreateLeaks);

        jScrollPaneLeaks.setViewportView(jScrollPaneCreateLeaks);

        jTabbedPaneNoteTrackerLeaks.addTab("Create Leaks", jScrollPaneLeaks);

        jTextFieldSearchedGanerName.setToolTipText("add searched gamer name");

        jButtonSearchGamerCreate.setText("SearchGamer");
        jButtonSearchGamerCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchGamerCreateActionPerformed(evt);
            }
        });

        jTextFieldNewGamerName.setToolTipText("add new gamer name");

        jButtonAddGamer.setText("Add gamer");
        jButtonAddGamer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddGamerActionPerformed(evt);
            }
        });

        jLabelCreateGamerResult.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelCreateGamerResult.setForeground(new java.awt.Color(51, 51, 255));
        jLabelCreateGamerResult.setText("Result");

        jComboBoxLeaks.setToolTipText("Select Leak");

        jButtonAddGamerLeak.setText("Add Leak");
        jButtonAddGamerLeak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddGamerLeakActionPerformed(evt);
            }
        });

        jLabelResultLeakAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelResultLeakAdd.setForeground(new java.awt.Color(0, 204, 0));
        jLabelResultLeakAdd.setText("Result Leak Add");

        picturePath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                picturePathMouseClicked(evt);
            }
        });
        picturePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picturePathActionPerformed(evt);
            }
        });

        jButtonAddPicture.setText("Add picture");
        jButtonAddPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPictureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCreateGamerLayout = new javax.swing.GroupLayout(jPanelCreateGamer);
        jPanelCreateGamer.setLayout(jPanelCreateGamerLayout);
        jPanelCreateGamerLayout.setHorizontalGroup(
            jPanelCreateGamerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCreateGamerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCreateGamerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelCreateGamerResult, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelCreateGamerLayout.createSequentialGroup()
                        .addComponent(jTextFieldSearchedGanerName, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSearchGamerCreate)
                        .addGap(191, 191, 191)
                        .addComponent(jTextFieldNewGamerName, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddGamer))
                    .addGroup(jPanelCreateGamerLayout.createSequentialGroup()
                        .addComponent(jComboBoxLeaks, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddGamerLeak, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelCreateGamerLayout.createSequentialGroup()
                        .addComponent(picturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanelCreateGamerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCreateGamerLayout.createSequentialGroup()
                                .addGap(604, 604, 604)
                                .addComponent(jLabelResultLeakAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelCreateGamerLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonAddPicture)))))
                .addContainerGap(902, Short.MAX_VALUE))
        );
        jPanelCreateGamerLayout.setVerticalGroup(
            jPanelCreateGamerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCreateGamerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCreateGamerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearchedGanerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearchGamerCreate)
                    .addComponent(jButtonAddGamer)
                    .addComponent(jTextFieldNewGamerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelCreateGamerResult, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCreateGamerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxLeaks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddGamerLeak))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelResultLeakAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCreateGamerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(picturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddPicture))
                .addContainerGap(760, Short.MAX_VALUE))
        );

        jScrollPaneCreateGamer.setViewportView(jPanelCreateGamer);

        jTabbedPaneNoteTrackerLeaks.addTab("Gamer Administration", jScrollPaneCreateGamer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPaneNoteTrackerLeaks, javax.swing.GroupLayout.DEFAULT_SIZE, 1535, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPaneNoteTrackerLeaks, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        String dbmsConnString = "jdbc:mysql://localhost:3306/notes_database";
    String userName = "root";
    String password = "SwiftTraining1";

    MySqlGamer mySqlGamer = new MySqlGamer(dbmsConnString, userName, password);
    MySqlPicture mySqlPicture = new MySqlPicture(dbmsConnString, userName, password);
    MySqlLeak mySqlLeak = new MySqlLeak(dbmsConnString, userName, password);
    String leakName;
    String gamerName;
    String fileName;
    int gamerId;
    Gamer gamer = null;
    Leak leak = null;
    List<Gamer> lastOpenedGamers = new ArrayList<>();

    private void jTextFieldSearchGamerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchGamerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchGamerActionPerformed

    public void hideForms() {
        
        gamerForm1.setVisible(false);
        gamerForm2.setVisible(false);
        gamerForm3.setVisible(false);
        gamerForm4.setVisible(false);
        gamerForm5.setVisible(false);
        gamerForm6.setVisible(false);
        gamerForm7.setVisible(false);
        gamerForm8.setVisible(false);
        gamerForm9.setVisible(false);
        gamerForm10.setVisible(false);
        gamerForm11.setVisible(false);
        gamerForm12.setVisible(false);
    }
    
    public Gamer getSearchedGamer(String gamerName) throws DALException, SQLException{
        gamer = null; 
        gamer = mySqlGamer.getGamer(gamerName);            
        
        return gamer;
    }
    public void addSearchedGamerToLastSearchedGamers(Gamer searchedGamer) throws DALException{
        if(gamer!=null){
           mySqlGamer.insertLastSearchedGamer(gamer.getGamerId());
        }       
    }
    public void loadGamersInfo(List<Gamer> gamers) throws SQLException, DALException, IOException{
        int counter = 0;
        for(Gamer gamer:gamers){
            switch(counter){
                case 1: gamerForm1.setVisible(true);
                        gamerForm1.showGamerInfo(gamer);                        
                    break;
                case 2: gamerForm2.setVisible(true);
                        gamerForm2.showGamerInfo(gamer);
                    break;
                case 3: gamerForm3.setVisible(true);
                        gamerForm3.showGamerInfo(gamer);
                    break;
                case 4: gamerForm4.setVisible(true);
                        gamerForm4.showGamerInfo(gamer);
                    break;
                case 5: gamerForm5.setVisible(true);
                        gamerForm5.showGamerInfo(gamer);
                    break;
                case 6: gamerForm6.setVisible(true);
                        gamerForm6.showGamerInfo(gamer);
                    break;
                case 7: gamerForm7.setVisible(true);
                        gamerForm7.showGamerInfo(gamer);
                    break;
                case 8: gamerForm8.setVisible(true);
                        gamerForm8.showGamerInfo(gamer);
                    break;
                case 9: gamerForm9.setVisible(true);
                        gamerForm9.showGamerInfo(gamer);
                    break;
                case 10: gamerForm10.setVisible(true);
                        gamerForm10.showGamerInfo(gamer);
                    break;
                case 11: gamerForm11.setVisible(true);
                        gamerForm11.showGamerInfo(gamer);
                    break;
                case 12: gamerForm12.setVisible(true);
                        gamerForm12.showGamerInfo(gamer);
                    break;
            }
            counter++;
        }
    }   
    public List<Gamer> getOpenGamers(Gamer gamer) throws DALException, SQLException{
      List<Gamer> openGamers = new ArrayList<>();
      openGamers.add(gamer);
      for(Gamer openGamer:mySqlGamer.getLastSearchedGamers()){
          openGamers.add(openGamer);
      }
      return openGamers;
    }

    private void jButtonSearchGamerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchGamerActionPerformed

        hideForms();
        gamerName = jTextFieldSearchGamer.getText();
        lastOpenedGamers=null;
        try {
            gamer = getSearchedGamer(gamerName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            addSearchedGamerToLastSearchedGamers(gamer);
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            lastOpenedGamers = getOpenGamers(gamer);
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            loadGamersInfo(lastOpenedGamers);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
jTextFieldSearchGamer.setText("");

//        if (gamerName != null || !gamerName.equals("")) {            
//            try {
//                gamer = mySqlGamer.getGamer(gamerName);
//            } catch (DALException ex) {
//                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (SQLException ex) {
//                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            try {
//                if (gamer != null) {
//                    mySqlGamer.insertLastSearchedGamer(gamer.getGamerId());
//                }
//
//            } catch (DALException ex) {
//                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            int gamerCount = 1;
//    try {
//        lastOpenedGamers = mySqlGamer.getLastSearchedGamers();
//    } catch (DALException ex) {
//        Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//    } catch (SQLException ex) {
//        Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//    }
//            try {
//                
//                for (Gamer searchGamer :lastOpenedGamers ) {
//
//                    switch (gamerCount) {
//                        case 1:
//                            gamerForm1.setVisible(true);
//                            try {
//                                gamerForm1.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 2:
//                            gamerForm2.setVisible(true);
//                            try {
//                                gamerForm2.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 3:
//                            gamerForm3.setVisible(true);
//                            try {
//                                gamerForm3.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 4:
//                            gamerForm4.setVisible(true);
//                            try {
//                                gamerForm4.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 5:
//                            gamerForm5.setVisible(true);
//                            try {
//                                gamerForm5.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 6:
//                            gamerForm6.setVisible(true);
//                            try {
//                                gamerForm6.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 7:
//                            gamerForm7.setVisible(true);
//                            try {
//                                gamerForm7.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 8:
//                            gamerForm8.setVisible(true);
//                            try {
//                                gamerForm8.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 9:
//                            gamerForm9.setVisible(true);
//                            try {
//                                gamerForm9.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 10:
//                            gamerForm10.setVisible(true);
//                            try {
//                                gamerForm10.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 11:
//                            gamerForm11.setVisible(true);
//                            try {
//                                gamerForm11.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                        case 12:
//                            gamerForm12.setVisible(true);
//                            try {
//                                gamerForm12.showGamerInfo(searchGamer);
//
//                            } catch (SQLException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            } catch (IOException ex) {
//                                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            break;
//                    }
//                    gamerCount++;
//
//                }
//            } catch (DALException ex) {
//                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }
    }//GEN-LAST:event_jButtonSearchGamerActionPerformed

    private void Gamer1(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Gamer1
//         TODO add your handling code here:

    }//GEN-LAST:event_Gamer1

    private void jButtonCreateLeakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateLeakActionPerformed
//         TODO add your handling code here:   

        leakName = jTextFieldLeakName.getText();

        if (!leakName.equals(null) || !leakName.equals("")) {
            try {
                mySqlLeak.insertLeak(leakName);
                jLabelResult.setVisible(true);
                jLabelResult.setText(leakName + " is added to database!");
            } catch (DALException ex) {
                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            jLabelResult.setVisible(true);
            jLabelResult.setText(leakName + " is not added to database because you don't write correct name!");
        }
    }//GEN-LAST:event_jButtonCreateLeakActionPerformed

    private void jButtonAddGamerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddGamerActionPerformed
        // TODO add your handling code here:
        if (jTextFieldNewGamerName.getText() != null || !jTextFieldNewGamerName.getText().equals("")) {
            String gamerName = jTextFieldNewGamerName.getText();

            try {
                mySqlGamer.insertNewGamer(gamerName);
                gamer = mySqlGamer.getGamer(gamerName);
                mySqlGamer.insertLastSearchedGamer(gamer.getGamerId());

            } catch (DALException ex) {
                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
            }
            String text = gamerName + " is added!";
            jTextFieldNewGamerName.setText("");
            jLabelCreateGamerResult.setVisible(true);
            jLabelCreateGamerResult.setText(text);

        }
    }//GEN-LAST:event_jButtonAddGamerActionPerformed

    private void jButtonSearchGamerCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchGamerCreateActionPerformed
        // TODO add your handling code here:

        if (jTextFieldSearchedGanerName.getText() != null || !jTextFieldSearchedGanerName.getText().equals("")) {
            // lastOpenGamers.removeAllItems();
            gamerName = jTextFieldSearchedGanerName.getText();
            try {
                gamer = mySqlGamer.getGamer(gamerName);
            } catch (DALException ex) {
                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabelCreateGamerResult.setVisible(true);
            jLabelCreateGamerResult.setText(gamer.getGamerName());
            jButtonAddGamerLeak.setVisible(true);
            jComboBoxLeaks.setVisible(true);
            picturePath.setVisible(true);
            jButtonAddPicture.setVisible(true);
            try {
                for (Leak leak : mySqlLeak.getAllLeaks()) {
                    jComboBoxLeaks.addItem(leak.getLeakName());
                }
            } catch (DALException ex) {
                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButtonSearchGamerCreateActionPerformed

    private void jButtonAddGamerLeakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddGamerLeakActionPerformed
        // TODO add your handling code here:
        leakName = jComboBoxLeaks.getSelectedItem().toString();
        gamerName = jLabelCreateGamerResult.getText();
        int leakID = 0;
        try {
            gamerId = mySqlGamer.getGamer(gamerName).getGamerId();
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            leakID = mySqlLeak.getLeakId(leakName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if (gamerId != 0 && leakID != 0) {
                mySqlLeak.insertGamerLeak(leakID, gamerId);
            }
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
        String insertLeakResult = leakName + " is added to gamer " + gamerName;
        jLabelResultLeakAdd.setVisible(true);
        jLabelResultLeakAdd.setText(insertLeakResult);
    }//GEN-LAST:event_jButtonAddGamerLeakActionPerformed

    private void picturePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picturePathActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_picturePathActionPerformed

    private void picturePathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picturePathMouseClicked
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File f = fileChooser.getSelectedFile();
        fileName = f.getAbsolutePath();
        picturePath.setText(fileName);
    }//GEN-LAST:event_picturePathMouseClicked

    private void jButtonAddPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPictureActionPerformed
        // TODO add your handling code here:
        fileName = picturePath.getText();
        gamerName = jLabelCreateGamerResult.getText();
        try {
            gamer = mySqlGamer.getGamer(gamerName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
        gamerId = gamer.getGamerId();
        try {
            mySqlPicture.insertNewPicture(gamerId, fileName);
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
        picturePath.setText("");
    }//GEN-LAST:event_jButtonAddPictureActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            mySqlGamer.deleteAllGamers();
        } catch (DALException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NoteTracker.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NoteTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NoteTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NoteTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoteTracker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NoteTracker().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public GamerForm gamerForm1;
    public GamerForm gamerForm10;
    public GamerForm gamerForm11;
    public GamerForm gamerForm12;
    public GamerForm gamerForm2;
    public GamerForm gamerForm3;
    public GamerForm gamerForm4;
    public GamerForm gamerForm5;
    public GamerForm gamerForm6;
    public GamerForm gamerForm7;
    public GamerForm gamerForm8;
    public GamerForm gamerForm9;
    public javax.swing.JButton jButtonAddGamer;
    public javax.swing.JButton jButtonAddGamerLeak;
    public javax.swing.JButton jButtonAddPicture;
    public javax.swing.JButton jButtonCreateLeak;
    public javax.swing.JButton jButtonSearchGamer;
    public javax.swing.JButton jButtonSearchGamerCreate;
    public javax.swing.JComboBox<String> jComboBoxLeaks;
    public javax.swing.JLabel jLabelCreateGamerResult;
    public javax.swing.JLabel jLabelLeakName;
    public javax.swing.JLabel jLabelResult;
    public javax.swing.JLabel jLabelResultLeakAdd;
    public javax.swing.JPanel jPanelCreateGamer;
    public javax.swing.JPanel jPanelCreateLeaks;
    public javax.swing.JScrollPane jScrollPaneCreateGamer;
    public javax.swing.JScrollPane jScrollPaneCreateLeaks;
    public javax.swing.JScrollPane jScrollPaneGamers;
    public javax.swing.JScrollPane jScrollPaneLeaks;
    public javax.swing.JPanel jScrollPanelGamers;
    public javax.swing.JTabbedPane jTabbedPaneNoteTrackerLeaks;
    public javax.swing.JTextField jTextFieldLeakName;
    private javax.swing.JTextField jTextFieldNewGamerName;
    public javax.swing.JTextField jTextFieldSearchGamer;
    public javax.swing.JTextField jTextFieldSearchedGanerName;
    private javax.swing.JTextField picturePath;
    // End of variables declaration//GEN-END:variables

}
